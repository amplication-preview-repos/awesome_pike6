/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BlogConsumer as PrismaBlogConsumer } from "@prisma/client";
import { BlogConsumerProcessInput } from "../BlogConsumerProcessInput";
import { BlogConsumerOutput } from "../BlogConsumerOutput";

export class BlogConsumerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlogConsumerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blogConsumer.count(args);
  }

  async blogConsumers<T extends Prisma.BlogConsumerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogConsumerFindManyArgs>
  ): Promise<PrismaBlogConsumer[]> {
    return this.prisma.blogConsumer.findMany<Prisma.BlogConsumerFindManyArgs>(
      args
    );
  }
  async blogConsumer<T extends Prisma.BlogConsumerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogConsumerFindUniqueArgs>
  ): Promise<PrismaBlogConsumer | null> {
    return this.prisma.blogConsumer.findUnique(args);
  }
  async createBlogConsumer<T extends Prisma.BlogConsumerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogConsumerCreateArgs>
  ): Promise<PrismaBlogConsumer> {
    return this.prisma.blogConsumer.create<T>(args);
  }
  async updateBlogConsumer<T extends Prisma.BlogConsumerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogConsumerUpdateArgs>
  ): Promise<PrismaBlogConsumer> {
    return this.prisma.blogConsumer.update<T>(args);
  }
  async deleteBlogConsumer<T extends Prisma.BlogConsumerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogConsumerDeleteArgs>
  ): Promise<PrismaBlogConsumer> {
    return this.prisma.blogConsumer.delete(args);
  }
  async ProcessBlogpostMessage(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ProcessBlogpostMessageV2(
    args: BlogConsumerProcessInput
  ): Promise<BlogConsumerOutput> {
    throw new Error("Not implemented");
  }
}
