/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlogConsumerService } from "../blogConsumer.service";
import { BlogConsumerCreateInput } from "./BlogConsumerCreateInput";
import { BlogConsumer } from "./BlogConsumer";
import { BlogConsumerFindManyArgs } from "./BlogConsumerFindManyArgs";
import { BlogConsumerWhereUniqueInput } from "./BlogConsumerWhereUniqueInput";
import { BlogConsumerUpdateInput } from "./BlogConsumerUpdateInput";
import { BlogConsumerProcessInput } from "../BlogConsumerProcessInput";
import { BlogConsumerOutput } from "../BlogConsumerOutput";

export class BlogConsumerControllerBase {
  constructor(protected readonly service: BlogConsumerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlogConsumer })
  async createBlogConsumer(
    @common.Body() data: BlogConsumerCreateInput
  ): Promise<BlogConsumer> {
    return await this.service.createBlogConsumer({
      data: data,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        processedAt: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlogConsumer] })
  @ApiNestedQuery(BlogConsumerFindManyArgs)
  async blogConsumers(@common.Req() request: Request): Promise<BlogConsumer[]> {
    const args = plainToClass(BlogConsumerFindManyArgs, request.query);
    return this.service.blogConsumers({
      ...args,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        processedAt: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlogConsumer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blogConsumer(
    @common.Param() params: BlogConsumerWhereUniqueInput
  ): Promise<BlogConsumer | null> {
    const result = await this.service.blogConsumer({
      where: params,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        processedAt: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlogConsumer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlogConsumer(
    @common.Param() params: BlogConsumerWhereUniqueInput,
    @common.Body() data: BlogConsumerUpdateInput
  ): Promise<BlogConsumer | null> {
    try {
      return await this.service.updateBlogConsumer({
        where: params,
        data: data,
        select: {
          author: true,
          content: true,
          createdAt: true,
          id: true,
          processedAt: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlogConsumer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlogConsumer(
    @common.Param() params: BlogConsumerWhereUniqueInput
  ): Promise<BlogConsumer | null> {
    try {
      return await this.service.deleteBlogConsumer({
        where: params,
        select: {
          author: true,
          content: true,
          createdAt: true,
          id: true,
          processedAt: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/process-blogpost-message")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ProcessBlogpostMessage(
    @common.Body()
    body: BlogConsumerProcessInput
  ): Promise<string> {
    return this.service.ProcessBlogpostMessage(body);
  }

  @common.Post("/blogconsumer/v2/process")
  @swagger.ApiOkResponse({
    type: BlogConsumerOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ProcessBlogpostMessageV2(
    @common.Body()
    body: BlogConsumerProcessInput
  ): Promise<BlogConsumerOutput> {
    return this.service.ProcessBlogpostMessageV2(body);
  }
}
